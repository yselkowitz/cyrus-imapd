#!perl
use Cassandane::Tiny;

use DBI;

sub test_admin_migrate_defaultalarms
    :needs_component_jmap :min_version_3_7 :ReverseACLs :MagicPlus
{
    my ($self) = @_;
    my $jmap = $self->{jmap};
    my $imap = $self->{store}->get_client();

    my @using = qw(
    urn:ietf:params:jmap:core
    urn:ietf:params:jmap:calendars
    https://cyrusimap.org/ns/jmap/admin
    https://cyrusimap.org/ns/jmap/calendars
    https://cyrusimap.org/ns/jmap/debug
    https://cyrusimap.org/ns/jmap/performance
);

    my $admin = $self->{adminstore}->get_client();
    my $http = $self->{instance}->get_service("http");
    my $adminJmap = Mail::JMAPTalk->new(
        user => 'admin',
        password => 'pass',
        host => $http->host(),
        port => $http->port(),
        scheme => 'http',
        url => '/jmap/',
    );
    $adminJmap->DefaultUsing(\@using);

    xlog $self, "Make sure regular user can't call Admin method";
    my $res = $jmap->CallMethods([
        ['Admin/migrateCalendarDefaultAlarms', {}, 'R1'],
    ], \@using);
    $self->assert_str_equals('accountNotSupportedByMethod',
        $res->[0][1]{type});

    xlog "share calendar with cassandane user";
    my ($sharerJmap, $sharerCaldav) = $self->create_user('sharer');
    my $res = $sharerJmap->CallMethods([
        ['Calendar/set', {
            update => {
                Default => {
                    shareWith => {
                        cassandane => {
                            mayReadItems => JSON::true,
                            mayWriteAll => JSON::true,
                        },
                    },
                },
            },
        }, 'R1'],
    ], [
        'urn:ietf:params:jmap:core',
        'urn:ietf:params:jmap:calendars',
        'urn:ietf:params:jmap:principals',
        'https://cyrusimap.org/ns/jmap/calendars',
    ]);
    $self->assert(exists $res->[0][1]{updated}{Default});

    xlog "create test calendar where alarms should not be migrated";
    $res = $jmap->CallMethods([
        ['Calendar/set', {
            create => {
                notMigrated => {
                    name => 'test',
                },
            },
        }, 'R1'],
    ]);
    my $notMigratedId = $res->[0][1]{created}{notMigrated}{id};
    $self->assert_not_null($notMigratedId);

    my $sharerImap = $self->{instance}->get_service('imap'
        )->create_store(username => 'sharer+dav')->get_client();

    xlog $self, "Remove JMAP default alert annotation from sharer calendar";
    $sharerImap->setmetadata('#calendars.Default',
        '/private/vendor/cmu/cyrus-httpd/<urn:ietf:params:jmap:calendars>defaultalerts', '');
    $self->assert_str_equals('ok', $sharerImap->get_last_completion_response());

my $valarms1 = <<EOF;
BEGIN:VALARM\r
UID:c5f1c439-d18d-4c98-89e1-211ccf752dec\r
TRIGGER:-PT5M\r
ACTION:DISPLAY\r
DESCRIPTION:alarmTime1\r
END:VALARM\r
EOF

    xlog $self, "Set shared CalDAV alarm annotation on sharer calendar";
    $sharerImap->setmetadata('#calendars.Default',
        '/shared/vendor/cmu/cyrus-httpd/<urn:ietf:params:xml:ns:caldav>default-alarm-vevent-datetime', $valarms1);
    $self->assert_str_equals('ok', $sharerImap->get_last_completion_response());

    xlog $self, "Remove JMAP default alert annotation from cassandane calendar";
    $imap->setmetadata('#calendars.Default',
        '/private/vendor/cmu/cyrus-httpd/<urn:ietf:params:jmap:calendars>defaultalerts', '');
    $self->assert_str_equals('ok', $imap->get_last_completion_response());

my $valarms2 = <<EOF;
BEGIN:VALARM\r
UID:19718cb0-8da2-4c22-a66e-1768975d65fb\r
TRIGGER:-PT10M\r
ACTION:DISPLAY\r
DESCRIPTION:alarmTime2\r
END:VALARM\r
EOF

    xlog $self, "Set shared CalDAV alarm annotation on cassandane calendar";
    $imap->setmetadata('#calendars.Default',
        '/shared/vendor/cmu/cyrus-httpd/<urn:ietf:params:xml:ns:caldav>default-alarm-vevent-datetime', $valarms2);
    $self->assert_str_equals('ok', $imap->get_last_completion_response());

    xlog $self, "Migrate default alarms";
    $res = $adminJmap->CallMethods([
        ['Admin/migrateCalendarDefaultAlarms', { }, 'R1'],
    ]);

    xlog $self, "Assert migrated calendars";

    # cassandane Default calendar got migrated.
    # Shared calendar did not get migrated.
    # Calendar with defaultalerts does not get migrated.
    $self->assert_deep_equals(['user.cassandane.#calendars.Default'],
        $res->[0][1]{migrated}{cassandane});

    # Sharer Default calendar got migrated for sharer.
    $self->assert_deep_equals(['user.sharer.#calendars.Default'],
        $res->[0][1]{migrated}{sharer});

    $self->assert_null($res->[0][1]{notMigrated});
}
